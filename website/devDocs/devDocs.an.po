# NVDA dev-docs Aragonés
# Copyright (C) 2014 Free Software Foundation, Inc.
# This file is distributed under the same license as the NVDA package.
# Jorge Pérez Pérez <jorgtum@gmail.com>, 2014
#
msgid ""
msgstr ""
"Project-Id-Version: NVDA dev-docs.\n"
"POT-Creation-Date: 2014-01-12 22:25+0000\n"
"PO-Revision-Date: 2014-11-29 18:36+0100\n"
"Last-Translator: Jorge Pérez Pérez <jorgtum@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: an\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.10\n"

#. type: Plain text
#, no-wrap
msgid "[[!meta title=\"NVDA Add-on Development Guide\"]]\n"
msgstr "[[!meta title=\"Guida de desembolique de Complementos d'o NVDA\"]]\n"

#. type: Plain text
msgid ""
"Welcome to NVDA add-on Development Guide. This is the one-stop guide on how "
"NvDA add-ons are developed, as well as explaining some useful code segments "
"from NvDA core source code useful when writing add-ons."
msgstr ""
"Bienveniu en a guida de desembolique de complementos d'o NVDA. Ista ye a "
"sola guida sobre cómo se desembolican os complementos d'o NVDA, asinas como "
"explicacions de bells segmentos d'o codigo fuent d'o nuclio d'o NVDA utils "
"quan s'escriben complementos."

#. type: Plain text
msgid ""
"For more information on NVDA development, please visit [NvDA Community "
"Development page][1]. Be sure to go over [NVDA Developer Guide][2] to "
"familiarize yourself with key terms and basics on getting started with add-"
"on development."
msgstr ""
"Ta mas información sobre o desembolique d'o NVDA, por favor visita [A "
"Pachina de Desembolique d'a Comunidat d'o NVDA][1]. Guarencia-te de revisar "
"[A Guida d'o desembolicador d'o NVDA][2] ta familiarizar-te con termins y "
"conceptos basicos claus sobre cómo empecipiar con o desembolique d'un "
"complemento."

#. type: Title ##
#, no-wrap
msgid "Audience"
msgstr "Audiencia"

#. type: Plain text
msgid ""
"This guide is designed for both beginners who are new to Python and/or NVDA "
"development in general, as well as experts and power users and programmers "
"who are familiar with Python or other programming languages and/or familiar "
"with NvDA source code structure."
msgstr ""
"Ista guida ye disenyada tant ta principiants que sigan nuevos en o Python "
"y / u en o desembolique d'o NVDA en cheneral, asinas como ta expiertos y "
"usuarios abanzaus y programadors que sigan familiarizaus con o Python y "
"atros luengaches de programación y / u familiarizaus con a estructura d'o "
"codigo fuent d'o NVDA ."

#. type: Plain text
msgid ""
"If you are new to NVDA add-on or core development, we recommend that you get "
"to know Python first, as it gives necessary programming background for "
"understanding the rest of the guide. If you are a Python programmer but are "
"new to NvDA development, please checkout NVDA development Guide and Design "
"Overview document, both of which can be found on the NVDA Community website."
msgstr ""
"Si yes nuevo en o desembolique de complementos u en o nuclio d'o NVDA, se "
"recomienda que te familiarices con o Python en primeras, ya que ofreix "
"conoixencias de programación necesarias ta comprender a resta d'a guida. Si "
"yes un programador d'o Python, pero yes nuevo en o desembolique d'o NVDA, "
"por favor compreba la Guida de Desembolique d'o NVDA y o documento "
"Descripción d'o disenyo, totz dos d'os quals se pueden trobar en o puesto "
"web d'a Comunidat d'o NVDA ."

#. type: Title ###
#, no-wrap
msgid "Authors, contributions and copyright"
msgstr "Autors, colaboracions y dreitos d'autor"

#. type: Plain text
msgid ""
"This guide was originally written by Joseph Lee and is shaped by NVDA user "
"and developer community. We welcome your feedback and contributionn."
msgstr ""
"Ista guida ye estada escrita orichinalment por Joseph Lee y ye conformada "
"por a comunidat d'usuarios y desembolicadors d'o NVDA. Agradeixemos os tuyos "
"comentarios y a tuya colaboración."

#. type: Plain text
msgid ""
"Copyright: NVDA is copyright 2006-2013 NV Access. Microsoft Windows, "
"Microsoft Office, Win32 API and other MS products are copyright Microsoft "
"Corporation. IAccessible package is copyright IBM and Linux Foundation. "
"Python is copyright Python Foundation. Other products mentioned are "
"copyrighted by authors of these products."
msgstr ""
"Dreitos d'autor: O NVDA ye propiedat 2006-2013 de NV Access. Microsoft "
"Windows, Microsoft Office, Win32 API y atros productos de MS son propiedad "
"de Microsoft Corporation. IAccessible package ye propiedat d'IBM y d'a Linux "
"Foundation. Python ye propiedat d'a Python Foundation. Atros productos "
"mencionaus son propiedat d'os autors d'istos productos."

#. type: Title ##
#, no-wrap
msgid "System requirements"
msgstr "Requisitos d'o sistema"

#. type: Plain text
msgid ""
"To create an add-on for NVDA, please make sure the following system "
"requirements are met:"
msgstr ""
"Ta creyar un complemento t'o NVDA, por favor guarencia-te que se cumplan os "
"siguients requisitos d'o sistema:"

#. type: Bullet: '* '
msgid ""
"A version of NVDA is available on your computer (either a portable or "
"installed version will work, but we strongly recommend that you install a "
"copy of NVDA on your development computer)."
msgstr ""
"Una versión d'o NVDA ye disponible en l'equipo (ya siga una versión portable "
"u instalada funcionará, pero te recomendamos encareixidament que instales "
"una copia d'o NVDA en l'equipo de desembolique)."

#. type: Bullet: '* '
msgid "Python 2.7 series, version 2.7.5 32-bit for Windows."
msgstr "Series d'o Python 2.7, versión 2.7.5 de 32 bits t'o Windows."

#. type: Bullet: '* '
msgid "SCons 2, version 2.3.0 for generating add-on packages."
msgstr "SCons 2, versión 2.3.0 ta chenerar paquetz de complemento."

#. type: Bullet: '* '
msgid "Markdown 2.0.1 or later for generating add-on documentation."
msgstr ""
"Markdown 2.0.1 u posterior ta chenerar a documentación d'o complemento."

#. type: Bullet: '* '
msgid "GNU Gettext package for Windows for message localization support."
msgstr ""
"Paquet GNU Gettext ta Windows t'o suporte de mensaches de localización."

#. type: Bullet: '* '
msgid ""
"Git 1.7.9 or later if you wish to upload the add-on to a repository such as "
"Bitbucket (optional, see below). You can use various Git clients, such as "
"Git Bash, Cygwin's Git, Tortoise Git and so forth."
msgstr ""
"Git 1.7.9 u posterior si deseyas cargar o complemento ta un repositorio como "
"Bitbucket (opcional, veyer mas abaixo). Puetz utilizar quantos clients de "
"Git, como Git Bash, Git de Cygwin, Tortoise Git y asinas succesivament."

#. type: Bullet: '* '
msgid ""
"The NVDA Community Add-on template for ease of add-on file and folder "
"packaging and management (optional; [click here][3] to download the add-on "
"template)."
msgstr ""
"A Plantilla NVDA Community Add-on ta facilitar l'empaquetau y administración "
"d'os fichers y carpetas d'o complemento (opcional; [fe clic aquí][3] ta "
"descargar a plantilla de complementos)."

#. type: Bullet: '* '
msgid "Additional Python modules or dependencies for your add-on."
msgstr "Modulos adicionals d'o Python u pendencias t'o tuyo complemento."

#. type: Title ##
#, no-wrap
msgid "What are add-ons?"
msgstr "Qué son os complementos?"

#. type: Plain text
msgid ""
"An add-on is an additional package that extends NvDA's functionality or "
"support for programs. This may include adding global features, enhancing "
"support for an application or adding support for newer braille displays or "
"speech synthesizers."
msgstr ""
"Un complemento ye un paquet adicional que extiende a funcionalidat d'o NVDA "
"u lo suporte ta  programas. Isto podrá incluir l'adición de caracteristicas "
"globals, a millora en o suporte ta una aplicación u l'adhibiu de suporte ta "
"pantallas braille u sintetizadors de voz mas modernos."

#. type: Plain text
msgid "An add-on may include one or more of the following components:"
msgstr ""
"Actualment, s'admiten os siguients modulos adicionals. Para cuenta que un "
"complemento puet incluir mas d'un modulo adicional tals como un complemento "
"global y un sintetizador de voz empaquetaus en un complemento."

#. type: Bullet: '* '
msgid ""
"Global plugin: A global plugin adds features for NVDA which can be used "
"anywhere, such as OCR capability."
msgstr ""
"Complemento global: Un plugin  global adhibe caracteristicas a lo NVDA que "
"se pueden fer servir en qualsiquier puesto, tal como a capacidat de OCR."

#. type: Bullet: '* '
msgid ""
"App module: An app module allows enhanced support for a program, such as "
"specific windows or controls of a program such as audio editors."
msgstr ""
"Modulo d'aplicación: Un modulo d'aplicación permite amillorar o suporte ta "
"un programa, tal como finestras especificas u controls d'un programa como "
"editors d'audio."

#. type: Bullet: '* '
msgid ""
"Driver: A driver allows a program to talk to hardware. Currently one can "
"write drivers for new braille displays or speech synthesizers."
msgstr ""
"Controlador: Un controlador permite a un programa contactar con o hardware. "
"actualment se pueden escribir controladors ta pantallas braille y "
"sintetizadors de voz nuevos."

#. type: Plain text
msgid ""
"Each NVDA add-on package (composed of one or more components) is a zip file "
"with the file extension of .nvda-addon. These can be installed via Add-ons "
"Manager, found in NvDA 2012.2 or later. Alternatively, one can install them "
"from file manager if one uses NVDA 2012.3 or later installed on the computer."
msgstr ""
"Cada paquet de complemento d'o NVDA (componiu por un u más modulos de "
"complemento) ye un fichero zip con a extensión de fichero .nvda-addon. Istos "
"pueden instalar-sen a traviés de l'administrador de complementos, trobau en "
"o NVDA 2012.2 u posterior. Alternativament, le'n puet instalar dende  u "
"chestor de fichers si s'utiliza NVDA 2012.3 u posterior instalau en "
"l'ordinador."

#. type: Plain text
msgid ""
"Throughout this guide, we refer to standard NVDA python modules which comes "
"with NVDA as \"NvDA Core\" to distinguish it from add-on modules."
msgstr ""
"A lo largo d'ista guida nos referiremos a os modulos estandar d'o NVDA que "
"vienen con o NVDA como \"NVDA Core\" ta distinguir-los de modulos de "
"complemento."

#. type: Title ##
#, no-wrap
msgid "Setting up the add-on development environment"
msgstr "Configurando lo entorno de desembolique de complementos"

#. type: Plain text
msgid "Follow these steps to prepare your computer for writing NVDA add-ons."
msgstr ""
"Sigue istos trangos ta parar o tuyo ordinador ta escribir complementos t'o "
"NVDA."

#. type: Title ###
#, no-wrap
msgid "Installing dependencies"
msgstr "Instalando as pendencias"

#. type: Bullet: '1. '
msgid ""
"If you don't have NVDA, download and install NVDA from NV access website."
msgstr ""
"Si no tiens o NVDA descarga-lo y instala-lo dende o puesto web de NV acces."

#. type: Bullet: '2. '
msgid ""
"Install Python 2.7.x 32-bit on your computer (if using Windows, install "
"using the 32-bit Windows installer package)."
msgstr ""
"Instala lo Python 2.7.x de 32 bits en o tuyo ordinador (si fas servir o "
"Windows, instala-lo utilizando lo paquet instalable d'o windows de 32 bits)."

#. type: Bullet: '3. '
msgid "Install Markdown and SCons using their Windows installer packages."
msgstr ""
"Instala o Markdown y o SCons utilizando los suyos paquetz t'a instalación "
"d'o Windows."

#. type: Bullet: '4. '
msgid "If you plan to share your add-on code with others, install Git clients."
msgstr ""
"Si planías de compartir o tuyo codigo d'o complemento con a resta instala-te "
"clients Git."

#. type: Bullet: '5. '
msgid ""
"Paste the Gettext executable files to your add-on development folder (see "
"the next section on add-on development folder)."
msgstr ""
"Apega os fichers executables d'o Gettext en a tuya carpeta de desembolique "
"de complementos (consulta en a sección siguient a carpeta de desembolique de "
"complementos)."

#. type: Bullet: '6. '
msgid ""
"If you are developing support for a program, speech synthesizer or a braille "
"display, install the needed software and/or have the hardware handy."
msgstr ""
"Si vas a desembolicar o suporte ta un programa, un sintetizador de voz u una "
"pantalla braille, instala-te o software necesario y / u tiene o hardware a "
"man."

#. type: Title ###
#, no-wrap
msgid "The add-on development folder"
msgstr "A carpeta de desembolique de complementos"

#. type: Plain text
msgid ""
"When writing add-ons, it is recommended that you store your add-on code in "
"separate folders, one per add-on. If you chose to download the add-on "
"template, the folder structure will be automatically created."
msgstr ""
"En escribir complementos, ye recomendable que alzes o tuyo codigo d'o "
"complemento en carpetas deseparadas, una por cada complemento. Si esliyes "
"descargar a plantilla de complemento, se creyará automaticament a estructura "
"de carpetas."

#. type: Plain text
msgid ""
"Once you install the needed dependencies (see above), paste the Gettext "
"package executables into this add-on folder."
msgstr ""
"Una vez que instales as pendencias necesarias (veyer-ne más alto), apega os "
"executables d'o paquet Gettext en ixa carpeta de complemento."

#. type: Title ###
#, no-wrap
msgid "Add-on folder structure"
msgstr "Estructura d'a carpeta de complementos"

#. type: Plain text
msgid ""
"Each add-on folder, at a minimum, must contain the following files and "
"folders:"
msgstr ""
"Cada carpeta de complemento, como minimo, ha de contener os siguients "
"ficheros y carpetas:"

#. type: Plain text
#, no-wrap
msgid ""
" * manifest.ini to store manifesst information such as add-on name and author.\n"
"* An \"addon\" subfolder with the add-on module directory underneath this subfolder (appModules, globalPlugins, synthDrivers, brailleDisplays). One or more module folders can be specified.\n"
msgstr ""
" * manifest.ini t'almagazenar información de manifesst tal como lo nombre y l'autor d'o complemento.\n"
"* Una subcarpeta \"addon\" con o directorio de modulos d'o complemento debaixo d'ista subcarpeta (appModules, globalPlugins, synthDrivers, brailleDisplays). se i puet especificar una u más carpetas de modulo.\n"

#. type: Plain text
msgid ""
"If you are using the add-on template, the folder structure will "
"automatically be created, so you need to create only the addon subfolder and "
"the add-on module folder(s) and code inside this folder. See the readme file "
"in the template folder for more information on customizing your add-on "
"manifest using the template files."
msgstr ""
"Si yes fendo servir a plantilla d'o complemento, se creyará automaticament a "
"estructura de carpetas, por o que necesitas nomás ta creyar a subcarpeta "
"addon y a carpeta d'o modulo complemento (s) y o codigo adentro d'ista "
"carpeta. Consulta o fichero Leiga-me en a carpeta de plantillas ta más "
"información sobre cómo personalizar o tuyo complemento en o manifiesto fendo "
"servir os ficheros de plantilla."

#. type: Title ###
#, no-wrap
msgid "Packaging add-ons"
msgstr "Empaquetando complementos"

#. type: Plain text
msgid "There are two ways of packaging add-ons:"
msgstr "Bi ha dos trazas d'empaquetar complementos:"

#. type: Bullet: '1. '
msgid ""
"To package your add-on manually, zip up (compress) your add-on folder as a ."
"zip file, then rename the file extension to .nvda-addon."
msgstr ""
"Ta empaquetar o complemento de traza manual, comprime o complemento en a "
"carpeta como un fichero .zip, contino, renombra la extensión d'o fichero ta. "
"NVDA-addon."

#. type: Bullet: '2. '
msgid ""
"To use the add-on template with SCons, open Command Prompt with "
"administrator mode (Windows Vista or later), change to your add-on folder "
"and type `scons~."
msgstr ""
"Ta fer servir a plantilla de complementos con SCons, ubre a consola de "
"comandos con o modo d'administrador (Windows Vista u posterior), cambea t'a "
"tuya carpeta de complementos y tecleya `scons~."

#. type: Plain text
msgid ""
"For more information on add-on management, see the management chapter in "
"this guide."
msgstr ""
"Ta más información sobre  l'administración de complementos, vei o capitol "
"administración en ista guida."

#. type: Title ##
#, no-wrap
msgid "Getting started: Hands-on examples"
msgstr "Por do empecipiar: Practicando con eixemplos"

#. type: Plain text
msgid ""
"So are you ready to start your adventure with add-ons, but not sure as to "
"how to bring it to life? If that is you, please go through this chapter, as "
"it gives you basic information to get you started with add-ons and give you "
"tips on writing code."
msgstr ""
"Asinas que yes presto ta escomencipiar a tuya aventura con os complementos "
"pero no yes seguro de cómo levar-lo t'a practica? Si ixe yes tú por favor ve "
"a traviés d'iste capitol, ya que te da la información basica ta empecipiar "
"con os complementos y te dará consellos sobre cómo escribir codigo."

#. type: Plain text
msgid ""
"Note: for this chapter, we will not use the actual add-on packages. Instead, "
"we'll use plugin folders - a number of subdirectories in your NVDA user "
"configuration folder (available from Start Menu/Screen if NVDA is installed) "
"to store our example Python files."
msgstr ""
"Nota: Ta iste capitol no imos a fer servir os paquetz de complemento reyals. "
"En cuenta imos a fer servir carpetas de complementos- un numero de "
"subdirectorios en a carpeta de configuración de l'usuario d'o "
"NVDA(disponibles dende o menú/pantalla Inicio si s'ha instalau lo NVDA) "
"t'almagazenar os nuestros ficheros Python d'eixemplo."

#. type: Plain text
msgid ""
"To edit .py files, you need a word processor which can handle .py files. The "
"best one we recommend is Notepad++."
msgstr ""
"Ta editar ficheros.py, amenistes un procesador de texto que pueda maniar "
"ficheros.py. O millor que te recomendamos ye o Notepad++."

#. type: Title ###
#, no-wrap
msgid "How add-on code is organized"
msgstr "Cómo ye organizau lo codigo d'os complementos"

#. type: Plain text
#, no-wrap
msgid " Your add-on code is stored in one or more Python files (.py file). Despite different kinds of add-ons out there, they all have similar layout.\n"
msgstr " O codigo d'o tuyo complemento s'almagazena en un u más ficheros Python (fichero .py). A pesar d'as diferents menas de complementos que bi ha por astí, totz ells tienen una distribución similar.\n"

#. type: Plain text
#, no-wrap
msgid " First, you start by writing an optional header for your add-on, such as your name, a brief sentence or two on what the add-on is for and so on. Although this is optional, it is recommend that you write the header as a reminder to keep track of what you are doing with your add-on.\n"
msgstr " En primeras, escomencipia por escribir un capitero opcional t'o complemento, tal como lo tuyo nombre, una u dos frases breus sobre ta qué ye o complemento y asinas succesivament. Encara que isto ye opcional, Se recomienda que escribas o capitero como un recordatorio ta realizar un seguimiento d'o que yes fendo con o tuyo complemento.\n"

#. type: Plain text
#, no-wrap
msgid " Next, you tell NVDA the modules you need for your add-on file. This is done by writing `import module` where module is the name of the module you wish to use in your code. For example, if you want to hear tones while writing your add-on, write `import tones`. Typically you may need to import two or more modules for your specific add-on (see below on list of modules you need for the type of add-on module you are writing).\n"
msgstr " Contino, le dices a lo NVDA os modulos que amenestes t'o complemento en o fichero. Ixo se fa escribindo `import module` an module ye o nombre d'o modulo que deseyes utilizar en o tuyo codigo. Por eixemplo, si quiers escuitar tons mientras escribes o tuyo complemento, escribe `import tones`. Normalment será posible que haigas d'importar dos u mas modulos t'o tuyo complemento especifico(se veiga mas abaixo en a lista de modulos que amenestes t'a mena de modulo d'o complemento que yes escribindo).\n"

#. type: Plain text
#, no-wrap
msgid " after declaring the modules you need or import, you write your add-on code (defining classes, variables, methods and so on). The most important section is the add-on class code, which will determine the type of add-on module your code will be assigned to.\n"
msgstr " dimpués de declarar os modulos necesarios u d'importar, escribe [o codigo d'o tuyo complemento (definindo clases, variables, metodos y asinas succesivament). A sección más important ye o codigo d'a clase d'o complemento, que determinará a mena de modulo de complemento a lo que s'asignará o tuyo codigo.\n"

#. type: Plain text
#, no-wrap
msgid " For instance, if you wish to add support for a program, after importing appModuleHandler and other needed modules, you would write:\n"
msgstr "Por eixemplo, si deseyas adhibir suporte ta un programa, dimpués d'importar appModuleHandler y atros modulos necesarios, podrías escribir:\n"

#. type: Plain text
#, no-wrap
msgid " `class appModule(appModuleHandler.AppModule):`\n"
msgstr " `class appModule(appModuleHandler.AppModule):`\n"

#. type: Plain text
msgid ""
"After that, all you are writing is Python code (see the Python documentation "
"on how to write Python programs)."
msgstr ""
"Dimpués d'ixo, tot o que s'escribe ye o codigo Python (consulta la "
"documentación de Python sobre cómo escribir programas en Python)."

#. type: Title ###
#, no-wrap
msgid "Running your add-on in this example chapter"
msgstr "Executando lo tuyo complemento en iste capitol d'eixemplo"

#. type: Plain text
msgid ""
"To run your example add-ons from this chapter, open your NVDA user "
"configuration directory (from Start Menu/Screen, look for Explore NVDA user "
"configuration folder\" item). Then paste your .py file to the appropriate "
"folder: appModules folder for app module examples, and globalPlugins folder "
"for global plugins."
msgstr ""
"Ta executar o tuyo eixemplo de complemento dende iste capitol, ubre o "
"directorio de configuración d'usuario d'o NVDA(dende o Menú u pantalla "
"Inicio, busca l'elemento NVDA \"  buscar Explorar a carpeta de configuración "
"de l'usuario). Dimpués apega o tuyo fichero .py en a carpeta correspondient: "
"carpeta appModules ta eixemplos de modulos d'aplicación, y carpeta "
"globalPlugins ta complementos globals."

#. type: Title ###
#, no-wrap
msgid "Example 1: Hear a tone when pressing NVDA+A"
msgstr "Eixemplo 1: Sentir un ton en pretar NVDA+A"

#. type: Plain text
msgid ""
"Let us start with a simple example: if you press NvDA+A, you would hear a "
"tone for 1 second from any program. Since we want to use this everywhere, it "
"must be a global plugin."
msgstr ""
"Imos a escomencipiar con un eixemplo sencillo: Si pretamos NVDA+A se siente "
"un ton entre 1 segundo dende qualsiquier programa. ya que queremos fer-ne "
"servir en todas partes, ha d'estar un complemento global."

#. type: Plain text
msgid ""
"First, open your user configuration folder, then open globalPlugins folder. "
"Create a new .py file and give it a descriptive name such as example1.py (it "
"is strongly recommended that when you name your global plugin file, give it "
"a short descriptive name). Then open the newly created .py file in the word "
"processor."
msgstr ""
"En primeras ubre a carpeta de configuración d'usuario, contino, ubre a "
"carpeta globalPlugins. Creya un nuevo fichero .py y da-le un nombre "
"descriptivo, como eixemplo1.py (se recomienda encareixidament que en que le "
"dés o nombre d'o fichero d'o complemento global, esleigas un nombre "
"descriptivo curto). Contino, ubre o fichero .py recién creyau en o "
"procesador de texto."

#. type: Plain text
msgid ""
"The below code implements our example. Put this in your .py file as exactly "
"as shown:"
msgstr ""
"O codigo siguient implementa o nuestro eixemplo. Mete isto en o tuyo "
"fichero .py exactament como s'amuestra.:"

#. type: Plain text
#, no-wrap
msgid "\t# Add-on development first example\n"
msgstr "\t# Primer eixemplo d'o desembolique  de complementos\n"

#. type: Plain text
#, no-wrap
msgid ""
"\timport globalPluginHandler\n"
"\timport tones # We want to hear beeps.\n"
msgstr ""
"\timport globalPluginHandler\n"
"\timport tones # Queremos sentir chuflius.\n"

#. type: Plain text
#, no-wrap
msgid "\tclass GlobalPlugin(globalPluginHandler.GlobalPlugin):\n"
msgstr "\tclass GlobalPlugin(globalPluginHandler.GlobalPlugin):\n"

#. type: Plain text
#, no-wrap
msgid ""
"\t\tdef script_doBeep(self, gesture):\n"
"\t\t\ttones.beep(440, 1000) # Beep a standard middle A for 1 second.\n"
msgstr ""
"\t\tdef script_ferChufliu(self, gesture):\n"
"\t\t\ttones.beep(440, 1000) # Chufla en ton meyo estandar entre 1 segundo.\n"

#. type: Plain text
#, no-wrap
msgid ""
"\t\t__gestures={\n"
"\t\t\t\"kb:NVDA+A\":\"doBeep\"\n"
"\t\t}\n"
msgstr ""
"\t\t__gestures={\n"
"\t\t\t\"kb:NVDA+A\":\"ferChufliu\"\n"
"\t\t}\n"

#. type: Plain text
msgid ""
"In Python, you put comments by putting hash sign (#) at the start of the "
"comment line."
msgstr ""
"En Python, ta meter comentarios se mete o sinyal de numero (#) a lo "
"prencipio d'a linia de comentario."

#. type: Title ###
#, no-wrap
msgid "Example 1 code explanation"
msgstr "Explicación d'o codigo d'Eixemplo 1"

#. type: Plain text
msgid ""
"Our first example let's us sound a beep for one second when we press NVDA+A. "
"But you might be wondering what that above code means, so let's step through "
"the code, one piece at a time."
msgstr ""
"O nuestro primer eixemplo nos permite fer sonar un chufliu entre un segundo "
"en que pretemos NVDA+A. pero podrías preguntar-te sobre o significau d'o "
"codigo de más alto, asinas que imos a dar uns trangos a traviés d'o codigo, "
"un trozo cada vegada."

#. type: Bullet: '1. '
msgid ""
"At the top of the file, we wrote a header which tells us that this is an "
"example add-on."
msgstr ""
"En a parti superior d'o fichero, escribimos un capitero que nos diz que iste "
"ye un eixemplo de complemento."

#. type: Bullet: '2. '
msgid ""
"Since this is a global plugin, we need to import a crucial module: global "
"plugin handler, so we wrote `import globalPluginHandler`."
msgstr ""

#. type: Bullet: '3. '
msgid ""
"Then we wrote `import tones` to import (load, or include) the tones module, "
"a built-in module from NVDA. Whenever you wish to use a method from a given "
"module, import the needed module(s)."
msgstr ""

#. type: Bullet: '4. '
msgid ""
"Next, we defined a class called GlobalPlugin. The text inside the brackets "
"tells us where this class is coming from (more on this concept in a second). "
"A class, in programming, describes an object, such as a person, a desk, a "
"program and others."
msgstr ""

#. type: Bullet: '5. '
msgid ""
"Inside the class, we wrote a method (function) called `script_doBeep`. This "
"is an example of a script, a method that'll be run or executed when you "
"press a command. Inside this script, we wrote `tones.beep(440, 1000)` to "
"tell NVDA to sound a middle A tone for 1 second. In programming, a function "
"can take arguments, or a set or parameters which tells the function what to "
"do based on the given values (we'll meet them later). In fact, many methods "
"you'll be writing, including our doBeep script takes one or more arguments. "
"More on scripts later as we journey through the guide."
msgstr ""

#. type: Bullet: '6. '
msgid ""
"Lastly, we wrote a simple dictionary (a collection) to store our command "
"(script) bindings for our doBeep script. Here, we told NVDA to assign NVDA+A "
"command for doBeep script."
msgstr ""

#. type: Plain text
msgid ""
"Save this file, then restart NVDA. Now whenever you press NvDA+A, you'll "
"hear a middle A tone for 1 second. Once you are comfortable with the add-on "
"code and how it is laid out, you can delete the newly created .py file."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "I don't understand those above terms"
msgstr ""

#. type: Plain text
msgid ""
"For some, the terms \"class\", \"method\" and so on might be new. Let's go "
"over what these terms are, as they are fundamental for add-on development:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"Class: a class describes an object. It could describe anything, such as a "
"person, a desk, an NVDA add-on and others. Classes are fundamental to NVDA "
"and other programs - in fact, a number of programmers are skilled at coming "
"up with classes."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Method: A method is a short program or a routine that a program runs for "
"doing something, such as generating tones, calculating huge numbers, loading "
"NVDA add-ons and so on. Some people call them \"functions.\""
msgstr ""

#. type: Bullet: '* '
msgid ""
"Script: A script is a method which runs when the user performs commands such "
"as pressing certain keys on a keyboard. For example, when you press NVDA"
"+F12, NVDA runs dateTime script, located in one of the NVDA core modules "
"named Global Commands. A script takes two arguments: where the script would "
"be executed (usually \"self\"; more on that later) and the gesture for the "
"script (see below)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Variable: A variable is something that can change, such as name of a person, "
"name of the NVDA add-on we're running, version of NVDA you are using and so "
"on. An add-on file may define one or more variables (for example, to store "
"common constants such as strings)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Module: A module is a collection of methods and variables in a file. When we "
"write add-ons, we are in fact writing additional modules that NVDA can use "
"while it is running."
msgstr ""

#. type: Plain text
msgid "There are other terms that we'll get to know shortly."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Example 2: Generate a tone when switching to Notepad"
msgstr ""

#. type: Plain text
msgid "Most of the below code comes from NvDA Developer Guide."
msgstr ""

#. type: Plain text
msgid ""
"Not only NVDA let's you add global commands, but it also allows writing code "
"to enhance usage of programs through app modules. An app module is also a "
"Python file except that, this time, the name of the .py file is the name of "
"the executable for a program. For example, an app module for Notepad would "
"be named notepad.py."
msgstr ""

#. type: Plain text
msgid ""
"The below code, from NVDA developer Guide, gives a short example of a "
"typical app module: play a short beep when switching to Notepad. Put the "
"below code in notepad.py, which in turn should be placed in appModules "
"folder in your user configuration folder in order for it to run."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\t# An example app module.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\timport appModuleHandler\n"
"\timport tones\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\tclass AppModule(appModuleHandler.AppModule):\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\t\tdef event_gainFocus(self, obj, nextHandler):\n"
"\t\t\ttones.beep(256, 200)\n"
"\t\t\tnextHandler()\n"
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Example 2 code explanation"
msgstr ""

#. type: Plain text
msgid ""
"We're seeing more new code here. Let's go over this, again piece by piece:"
msgstr ""

#. type: Bullet: '1. '
msgid ""
"Unlike the first example, the crucial module we need is appModuleHandler."
msgstr ""

#. type: Bullet: '2. '
msgid "The class that we are using is AppModule."
msgstr ""

#. type: Bullet: '3. '
msgid ""
"Unlike last time, we're using events, a method run when certain events occur "
"such as when names of controls change. Events take an object as one of its "
"arguments, the object for which the event needs to be dealt with, or, as "
"many people say, \"fired.\""
msgstr ""

#. type: Bullet: '4. '
msgid ""
"Inside the event method, we're also seeing a call to `nextHandler`. This "
"method is used in event methods to tell NvDA to pass the event so it can be "
"taken care of, such as saying the name of a control after beeping."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "More new terms please"
msgstr ""

#. type: Plain text
msgid "Other terms you may see include:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"Event: An event is a method that'll be run when some events happen, such as "
"when a program is on focused, when names of controls change and so on."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Call: We say a function calls some another method when we run the second "
"method from another method. For example, in our first example, we're calling "
"tones.beep method from our script method."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Object: An object is an instance of a class - that is, a class coming to "
"life when a program runs. Throughout your add-ons, as you write classes and "
"when you run your add-ons, your classes come to life as objects, commonly "
"abbreviated to obj. In NVDA, an object may refer to controls or parts of a "
"program."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Self: In Python, the word \"self\" means current class (if we're defining "
"one, such as when writing add-ons), or means the class for which a method is "
"defined. For example, in a class called numbers, the add method would have "
"self as the first argument, reminding us that add method is part of the "
"class of numbers. In NVDA development world, self usually means the current "
"NVDA object (see below), or in the add-on development, the instance of an "
"add-on. Many of your methods will have self as the first argument."
msgstr ""

#. type: Plain text
msgid ""
"Just like example 1, once you're comfortable with app module code, you may "
"wish to delete the Notepad app module code unless you want to keep hearing "
"beeps when you switch to Notepad. The actual differences between global "
"plugins and app modules will become more clear when we talk about them in "
"more detail throughout this guide."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "A few tips for beginners"
msgstr ""

#. type: Plain text
msgid "Here are a few useful tips passed on by add-on writers:"
msgstr ""

#. type: Bullet: '* '
msgid "Start with easy add-ons, such as saying a message, tones and so on."
msgstr ""

#. type: Bullet: '* '
msgid "Write and test one method at a time."
msgstr ""

#. type: Bullet: '* '
msgid ""
"If you are writing app modules or drivers, become familiar with programs, "
"synthesizers or braille displays you wish to support (e.g. read "
"documentation, try using them, etc.)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"When defining commands (especially in global plugins), consult commands used "
"in NvDA and other add-ons first before assigning a new command in your add-"
"on to avoid command conflicts."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "Useful modules from NVDA core"
msgstr ""

#. type: Plain text
msgid ""
"Throughout the life of add-on development, you'll come across some useful "
"modules from NvDA core that would be helpful in your add-on code. This "
"section explains them and some functions in those modules that would be "
"useful."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "List of useful NVDA core modules and methods"
msgstr ""

#. type: Plain text
msgid ""
"The following lists available NVDA core modules and some useful methods "
"found in those modules:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"Addon Handler (addonHandler.py): The module which implements the add-on "
"subsystem. The addonHandler.initTranslation() method is used to initialize "
"internationalization support for your add-on."
msgstr ""

#. type: Bullet: '* '
msgid ""
"NVDA basic API (api.py): A collection of core methods used throughout NVDA, "
"such as obtaining focus and navigator object, setting focus and so on. See "
"the next list on useful methods from this module."
msgstr ""

#. type: Bullet: '* '
msgid ""
"App Module subsystem (appModuleHandler.py, appModules): The subsystem in "
"charge of handling app modules (see chapter on app modules for more "
"information)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"ARIA support (aria.py): Implements support for Accessible Rich Internet "
"Applications (ARIA)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Base object collection (baseObject.py): Contains useful base objects such as "
"scriptable objects (see the chapter on NvDA objects and overlay objects for "
"more information)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Braille input and output subsystem (braille.py, brailleInput.py): Controls "
"braille output to and input from braille displays, needed by braille display "
"driver add-ons."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Build-in modules (builtin.py): Allows access to builtin modules when working "
"with add-ons."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Configuration (config): Manages configuration and profiles (profiles are "
"available in 2013.3 or later)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Controls and states collection (controltypes.py): Includes dictionaries on "
"control types (roles) and possible states that a control can be in."
msgstr ""

#. type: Bullet: '* '
msgid "Events (eventHandler.py): Handles various events such as gaining focus."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Global Commands collection (globalCommands.py): A list of global commands "
"available while using NVDA (see section on script scope for more "
"information)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Global Plugin subsystem (globalPluginHandler.py): The module needed for "
"controlling global plugins."
msgstr ""

#. type: Bullet: '* '
msgid ""
"NVDA GUI (gui): A collection of classes used by NVDA to display its messages "
"graphically. Includes GUI's for NVDA menu, add-on manager and others."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Hardware port utilities (hwPortUtils.py): A set of utilities for "
"communicating over serial and other hardware ports, useful during driver add-"
"on development."
msgstr ""

#. type: Bullet: '* '
msgid ""
"IAccessible support (IAccessibleHandler.py, IAccessible objects): Used for "
"supporting IAccessible controls."
msgstr ""

#. type: Bullet: '* '
msgid "Input management (inputCore.py): Manages input from the user."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Java Access Bridge support (JABHandler.py): A collection of methods used for "
"supporting JAB subsystem used for Java applications."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Keyboard input (keyboardHandler.py): Supports entering commands from the "
"keyboard."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Logging facility (logHandler.py): Allows a module to write logs to be viewed "
"by a developer or a user via Log Viewer."
msgstr ""

#. type: Bullet: '* '
msgid "Mouse support (mouseHandler.py): Supports mouse commands."
msgstr ""

#. type: Bullet: '* '
msgid ""
"NvDA objects collection (NVDAObjects): A collection of NvDA objects or "
"controls used in many applications and standards such as UIA (User Interface "
"Automation)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Scripts support (scriptHandler.py): Handles scripts, methods executed due to "
"the user pressing keyboard commands and other input."
msgstr ""

#. type: Bullet: '* '
msgid "Speech output (speech.py): Controls speech output."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Synthesizer driver support (synthDriverHandler.py): This is the core module "
"needed for speech synthesizer add-ons."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Widget text access (textInfos): Allows access to text for widget and "
"documents."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Touchscreen support (touchHandler.py): Provides support for touchscreen "
"input (installed versions only)."
msgstr ""

#. type: Bullet: '* '
msgid "Tone output (tones.py): Allows the user to hear tones."
msgstr ""

#. type: Bullet: '* '
msgid ""
"User interface messages (ui.py): Includes ui.message method used to speak or "
"braille certain text."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Virtual buffers (virtualBuffers): Handles virtual buffer documents such as "
"websites."
msgstr ""

#. type: Plain text
msgid ""
"The modules without .py extension are directories, containing specialist "
"modules."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Useful methods"
msgstr ""

#. type: Plain text
msgid ""
"Here is a list of some useful methods used in add-ons. For more information "
"on how they're implemented, see the NvDA source code documentation. For "
"worked out examples, see the section of this guide on add-on components."
msgstr ""

#. type: Plain text
msgid "From addonHandler:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"`addonHandler.initTranslation()`: Sets up the translation subsystem for add-"
"ons via Gettext."
msgstr ""

#. type: Plain text
msgid "From api.py:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"`api.getFocusObject()`: Retrieves the focused control (returns the object "
"with focus)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"`api.getNavigatorObject()`: Fetches the current navigator object. If NvDA is "
"set to follow system focus, the focus and navigator object will be the same, "
"otherwise a different object is returned."
msgstr ""

#. type: Bullet: '* '
msgid ""
"`api.getForegroundObject()`: Returns the foreground window of the current "
"application (the parent of this object is the application itself)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"These have a corresponding method to set certain object as the focus or "
"navigator object."
msgstr ""

#. type: Plain text
msgid "From logHandler:"
msgstr ""

#. type: Bullet: '* '
msgid "`logHandler.Log`: The class which implements logging facility."
msgstr ""

#. type: Plain text
msgid "From tones:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"`tones.beep(pitch in hertz, duration in milliseconds, left channel volume, "
"right channel volume)`: Plays a tone of specified pitch for specified "
"duration. The first two arguments are mandatory, while the other two are "
"optional."
msgstr ""

#. type: Plain text
msgid "From ui:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"`ui.message(message to be spoken/brailled)`: Speaks or brailles the message. "
"This should be a string surrounded by quotes."
msgstr ""

#. type: Plain text
msgid ""
"There are other useful methods out there, but the above are the most useful "
"ones. See the NVDA source code documentation for other methods, or see the "
"examples below on how these methods and others are used throughout the life "
"of an add-on."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "Add-on module components and development tips"
msgstr ""

#. type: Plain text
msgid ""
"An add-on module consists of a number of components. This includes handling "
"input and output, working with different NvDA objects, reacting to events, "
"storing configuration and more."
msgstr ""

#. type: Plain text
msgid ""
"This chapter introduces key components and concepts that are used in add-on "
"development, such as NVDA objects, scripts, event handling and additional "
"topics with examples."
msgstr ""

#. type: Plain text
msgid ""
"Note that the NVDA core development guide introduces the below concepts. "
"This chapter is intended as an extension of that document. Consult the NVDA "
"development guide for a brief introductions."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Working with objects on screen"
msgstr ""

#. type: Plain text
msgid ""
"An object is an instance of a class - that is, a class coming to life while "
"a program is running. For example, if a class called button has been "
"defined, the button on a screen is the object of this button class."
msgstr ""

#. type: Plain text
msgid ""
"In NVDA, an object is representation of a control or parts of a program. "
"This includes buttons, check boxes, edit fields, toolbars, sliders and even "
"the application window. These are organized into hierarchies, or parent-"
"child relationship where an object may contain child objects - for example, "
"a list object in Windows Explorer may contain one or more list items, and "
"the parent of this list might be the Windows Explorer window. The object "
"that you're examining right now is termed \"navigator object.\""
msgstr ""

#. type: Plain text
msgid ""
"The NVDA objects (or simply called objects) contains a number of useful "
"properties or atributes. These include the object's name, its value "
"(checked, text of the edit window, etc.), role (check box, window, embedded "
"object, etc., location (screen coordinates) and more. NVDA objects also "
"contain useful methods for manipulating them, such as changing the value of "
"the object, reacting to events for the object (gains focus, value changed, "
"etc.) and so on."
msgstr ""

#. type: Plain text
msgid ""
"In many situations, an NvDA object may belong to a class of related objects. "
"For each object classes, NvDA provides ways of handling them. These classes "
"include IAccessible, JAB, UIA and so forth. These classes and behaviors for "
"each class of objects is defined in NVDAObjects directory in the NvDA source "
"code, and to use them in your add-on, import the appropriate object class "
"handler for the object you're using (e.g. if you're working with an "
"IAccessible object, impore NVDAObjects.IAccessible.)."
msgstr ""

#. type: Plain text
msgid ""
"Two of these object classes merit special mention: virtual buffers and tree "
"interceptors. A tree interceptor allows NvDA to work with a \"tree\" of "
"objects as though they are just one object. A special case of tree "
"interceptor is virtual buffer, which allows NVDA to work with complex "
"documents such as PDF documents."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Examining object hierarchy"
msgstr ""

#. type: Plain text
msgid ""
"There are a number of ways which you can use to see the hierarchy of an "
"object for a given program:"
msgstr ""

#. type: Bullet: '1. '
msgid ""
"Using object navigation commands (NvDA+Numpad 2/4/5/6/8) with simple review "
"mode turned off."
msgstr ""

#. type: Bullet: '2. '
msgid ""
"Using Python Console, use obj.next/previous/parent/firstChild/lastChild "
"attributes. If you want to see all available properties, from mPython "
"Console, type dir(obj)."
msgstr ""

#. type: Plain text
msgid ""
"If you wish to see a more detailed description about the navigator object, "
"while the navigator object is located at the object you're interested in, "
"press NvDA+F1 to launch log viewer. The root of all objects in Windows is "
"the desktop, or shell object."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Focus vs. navigator object"
msgstr ""

#. type: Plain text
msgid ""
"In your add-on, you might wish to work with various objects and manipulate "
"them. These may include changing the focused object, synchronizing navigator "
"and focus objects, changing the role of an object and so on."
msgstr ""

#. type: Plain text
msgid ""
"A focus object is the currently focused control. These are linked to "
"keyboard focus - that is, it follows the highlighted control. In contrast, a "
"navigator object is the object you're interested in. Since navigator objects "
"can move anywhere, you can examine two objects at once: the focused object "
"and the navigator object. For instance, you might be focused on an edit "
"field while examining the title bar as the navigator object."
msgstr ""

#. type: Plain text
msgid ""
"In your add-on, to fetch the object with focus, write `someObj = api."
"getFocusObject()`. The someObj can be named differently - the convention is "
"to use the name \"obj\". To fetch the navigator object (which might be "
"different from the focused object), use `obj = api.getNavigatorObject()`."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Other useful object-related goodies"
msgstr ""

#. type: Plain text
msgid ""
"Here are some other methods which works with NVDA objects, all located in "
"api.py module:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"If you wish to obtain the foreground object (useful if you wish to look at "
"some child object of the foreground window), use `obj = api."
"getForegroundObject()`."
msgstr ""

#. type: Bullet: '* '
msgid ""
"From Python Console, to see the number of child objects that an object "
"contains (for instance, the children, or widgets of a foreground window), "
"type `obj.childCount`. The value 0 means that there are no more child "
"objects."
msgstr ""

#. type: Bullet: '* '
msgid ""
"To set some object as the new focus or navigator object, use `api."
"setFocusObject(obj)` or `api.setNavigatorObject(obj)`."
msgstr ""

#. type: Bullet: '* '
msgid ""
"You can fetch various properties of an object by specifying obj.property "
"where property is the attribute you wish to see (e.g. obj.value)."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Example 1: Finding the value of a slider in a program"
msgstr ""

#. type: Plain text
msgid ""
"Suppose you are asked by a user to give him the value of a slider in a "
"program using an app module. After looking at the object hierarchy and other "
"properties, you know that the toolbar is the last child of the foreground "
"object."
msgstr ""

#. type: Plain text
msgid "Here is the code to implement this feature:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\t# Object example 1\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\timport api\n"
"\timport appModuleHandler\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\t\tsliderChildIndex = -1 # The variable to store the child index.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\t\tdef getSliderValue(self):\n"
"\t\t\tfg = api.getForegroundObject()\n"
"\t\t\tsliderVal = fg.children[self.sliderChildIndex].value\n"
"\t\t\treturn sliderVal\n"
msgstr ""

#. type: Plain text
msgid ""
"In this code, the method `fg.children[index]` is used to retrieve the child "
"with the given index (here, since we said the toolbar is the last child, the "
"index would be minus 1, or the very last child; we could have used fg."
"lastChild)."
msgstr ""

#. type: Plain text
msgid ""
"However, this code has an issue: what if the slider value is actually within "
"the first child of the actual slider control? One way to fix this is to "
"check the object's role. The modified code looks like this:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\tdef getSliderValue(self):\n"
"\t\tfrom controltypes import ROLE_SLIDER # It is possible to import from within a method.\n"
"\t\tfg = api.getForegroundObject()\n"
"\t\tslider = fg.lastChild\n"
"\t\tif slider.role == ROLE_SLIDER: return slider.firstChild.value\n"
msgstr ""

#. type: Plain text
msgid ""
"Thus, when we know for sure that we're dealing with the slider, the method "
"returns the value of the slider's first child (if that is the case). Note "
"the two equals signs for equality, as opposed to just one equals sign for "
"assignment."
msgstr ""

#. type: Plain text
msgid ""
"There are other examples you can try to familiarize yourself with object "
"navigation and manipulation:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"Obtaining the name of an object that is located somewhere else in the "
"program."
msgstr ""

#. type: Bullet: '* '
msgid "Moving the navigator to the foreground object."
msgstr ""

#. type: Bullet: '* '
msgid "Setting focus to another program."
msgstr ""

#. type: Plain text
msgid ""
"For real-life examples on objects in NvDA, consult the NvDA source code or "
"source codes of various community add-ons."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Specialist objects and overriding object properties at runtime"
msgstr ""

#. type: Plain text
msgid ""
"Sometimes, it is not enough to work with default behavior for a control. For "
"example, some parts of a program may need custom gestures, or one may need "
"to change the role of a window to that of a button."
msgstr ""

#. type: Plain text
msgid ""
"NVDA provides two methods for creating specialist, or overlay objects (or "
"classes), each suited for different needs:"
msgstr ""

#. type: Bullet: '* '
msgid ""
"`event_NvDAObject_init(self, object we're dealing with)`: If you wish to "
"override certain attributes of a control such as its role or label (name), "
"you can use this method to ask NvDA to take your \"input\" to account when "
"meeting objects for the first time (or initialized). For instance, if the "
"control has the window class name of TForm (seen on many Delphi "
"applications), you can ask NVDA to treat this control as a standard window "
"by assigning obj.role = ROLE_WINDOW (see control types dictionary for list "
"of available roles)."
msgstr ""

#. type: Bullet: '* '
msgid ""
"`chooseNVDAObjectOverlayClasses(self, object, list of classes)`: This allows "
"NVDA to use your own logic when dealing with certain objects. For example, "
"this is useful if you wish to assign custom gestures for certain parts of a "
"program in your app module (in fact, many app modules creates objects to "
"deal with certain parts of a program, then uses "
"chooseNvDAObjectOverlayClasses to select the correct object when certain "
"conditions are met). These custom objects must be based on a solid object "
"that we wish to eeal with (mostly IAccessible is enough, thus most overlay "
"objects inherit from, or is the child or specialist class of IAccessible "
"objects)."
msgstr ""

#. type: Plain text
msgid ""
"Note that in case of the second method, the class(s) with the given name "
"must be present in the file, which is/are inherited from a known base object "
"(in Python, the syntax for the inheritence is `childClass(baseClass)`, and "
"is usually read as, \"this child class inherits from this base class\". "
"We'll see code like this later)."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Examples of overlay classes and modified roles"
msgstr ""

#. type: Plain text
msgid ""
"Below examples illustrate the uses of the two overlay and attribute "
"modification methods we've discussed above:"
msgstr ""

#. type: Plain text
msgid "An example of the first case: modifying an atribute."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\t# Reassign some Delphi forms as window.\n"
"\t\tdef event_NvDAObject_init(self, obj):\n"
"\t\t\tif obj.windowClassName == \"TForm\": obj.role = ROLE_WINDOW\n"
msgstr ""

#. type: Plain text
msgid ""
"This means that whenever we encounter a window with the class name of \"TForm"
"\", NvDA will treat this as a normal window."
msgstr ""

#. type: Plain text
msgid ""
"Example 2 deals with an app module which has two objects for dealing with "
"specific parts of a program, then uses chooseNVDAObjectOverlayClasses to "
"assign the logic for each control."
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\t#An example of overlay classes\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\tclass enhancedEdit(IAccessible):\n"
"\t\t# Some code to be run when window class name is MyEdit.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\tclass MainWindow(IAccessible):\n"
"\t\t# Another code, this time adding custom gestures for main window of the program.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\t# In the app module:\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\tdef chooseNVDAObjectOverlayClasses(self, obj, clsList):\n"
"\t\tif obj.windowClassName == \"myEdit\": clsList.insert(0, enhancedEdit)\n"
"\t\telif obj.windowClassName == \"TWindow\": clsList.insert(0, mainWindow)\n"
msgstr ""

#. type: Plain text
msgid ""
"In both cases, the object that we wish to check must be inserted as the "
"first element of the clsList. The effect is that these custom objects will "
"take precedence when looking up gestures or code (behavior) for the object, "
"and in the developer info, these custom objects will come first when MRO "
"(Method Resolution Order) for the navigator object is displayed."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Input and output: scripts and UI messages"
msgstr ""

#. type: Plain text
msgid ""
"Another crucial component of add-ons is handling commands from users and "
"displaying what the add-on is doing. These are done via scripts (input) and "
"UI messages (output)."
msgstr ""

#. type: Plain text
msgid ""
"A script is a method run when the user performs certain commands. For "
"example, when you press NvDA+T, NVDA runs a script in global commands module "
"called SayTitle. In Poedit, for instance, when a translator presses Control"
"+Shift+A, NvDA will read translator comments added by the programmer to help "
"clarify a given translatable string. this command is not a native NvDA "
"command, but it is defined in the Poedit app module to perform this function."
msgstr ""

#. type: Plain text
msgid ""
"Typically, an add-on which accepts scripts will have a list of command:"
"function map somewhere in the module. The simplest is a gestures (commands) "
"dictionary, a python dictionary (typically named __gestures) which holds "
"commands as keys and scripts as values for these keys (more than one key, or "
"command can be bound to scripts). These dictionaries are loaded when add-on "
"loads and is cleared when either NvDA exits or the app for the app module "
"loses focus (that is, the user has switched to another program)."
msgstr ""

#. type: Plain text
msgid ""
"Another way to bind scripts is via runtime insertion. This is done by "
"creating another gestures dictionary apart from __gestures dictionary which "
"holds context-sensitive gestures such as manipulating a single control. Then "
"the developer would use inputCore.bindGesture (or inputCore.bindGestures if "
"more than one gestures/scripts are defined) to define certain gestures for a "
"time, then using inputCore.clearGestures then inputCore."
"bindGestures(__gestures) to remove the added gestures. A more elegant way, "
"which involves scripts for specific objects, will be covered when we talk "
"about overlay classes."
msgstr ""

#. type: Plain text
msgid ""
"As of time of writing, NvDA supports input from the keyboard, braille "
"dislays with or without braille keyboard and touchscreens."
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Example 2: A basic script dictionary"
msgstr ""

#. type: Plain text
msgid ""
"In this example, we'll define two scripts called \"sayHello\" and say"
"\"GoodBye\", then bind them into two separte gestures."
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\t# An example fragment for script assignment.\n"
"\timport ui\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\tdef script_sayHello(self, gesture):\n"
"\t\tui.message\"Hello!\")\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\tdef script_sayGoodBye(self, gesture):\n"
"\t\tui.message(\"Good Bye!\")\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"\t__gestures={\n"
"\t\t\"kb:control+NVDA+1\":\"sayHello\",\n"
"\t\t\"kb:Control+NVDA+2\":\"sayGoodBye\"\n"
"\t}\n"
msgstr ""

#. type: Plain text
msgid ""
"Now when you press Control+NvDA+1, NvDA will say, \"Hello\", and when you "
"press Control+NvDA+2, NVDA will say, \"Good bye.\""
msgstr ""

#. type: Title ###
#, no-wrap
msgid "Example 3: runtime script insertion/removal"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "\t# Future sections #\n"
msgstr ""

#. type: Plain text
msgid "Please delete this notice when appropriate sections are done."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "Add-on components and development tips"
msgstr ""

#. type: Plain text
msgid ""
"Includes introductions to input and scripts, output systems, objects, "
"events, configuration, add-on settings and reloading plug-ins. Also includes "
"some tips on add-on development such as debugging. It concludes with some "
"useful examples and do's and don'ts."
msgstr ""

#. type: Plain text
msgid ""
"Planned sections (please feel free to contribute your knowledge in this "
"section):"
msgstr ""

#. type: Bullet: '* '
msgid "Introduction to NVDA objects."
msgstr ""

#. type: Bullet: '* '
msgid "Examining object attributes with Python Console."
msgstr ""

#. type: Bullet: '* '
msgid "Fetching and setting objects."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Object hierarchy and differences between regular and simple review modes."
msgstr ""

#. type: Bullet: '* '
msgid "The event_NVDAObject_init and chooseNVDAObjectOverlayClasses methods."
msgstr ""

#. type: Bullet: '* '
msgid "Events and list of available events."
msgstr ""

#. type: Bullet: '* '
msgid "Next handlers."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Input from keyboard, braille displays, mouse and touchscreen via scripts."
msgstr ""

#. type: Bullet: '* '
msgid "Script lookup process and conflicts."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Static and dynamic script bindings, gesture dictionaries and script "
"categories."
msgstr ""

#. type: Bullet: '* '
msgid "Braille, speech and tone output."
msgstr ""

#. type: Bullet: '* '
msgid "Debugging add-ons."
msgstr ""

#. type: Bullet: '* '
msgid "If something goes wrong (common errors and exceptions)."
msgstr ""

#. type: Bullet: '* '
msgid "Few working and non-working examples for each topic."
msgstr ""

#. type: Bullet: '* '
msgid "These plan sections may change."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "Global Plugins"
msgstr ""

#. type: Plain text
msgid "A chapter devoted to global plugins."
msgstr ""

#. type: Plain text
msgid "Planned sections:"
msgstr ""

#. type: Bullet: '* '
msgid "What exactly is global plugin."
msgstr ""

#. type: Bullet: '* '
msgid ""
"Importance of consulting NvDA and add-on commands to minimize command "
"conflicts."
msgstr ""

#. type: Bullet: '* '
msgid "When not to use global plugins."
msgstr ""

#. type: Bullet: '* '
msgid "A few worked out examples."
msgstr ""

#. type: Bullet: '* '
msgid "These sections may change."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "App Modules"
msgstr ""

#. type: Plain text
msgid "A chapter devoted to app modules."
msgstr ""

#. type: Bullet: '* '
msgid "What is an app module."
msgstr ""

#. type: Bullet: '* '
msgid "App module scripts."
msgstr ""

#. type: Bullet: '* '
msgid "Defining objects representing different parts of a program."
msgstr ""

#. type: Bullet: '* '
msgid "Silencing NVDA for a program."
msgstr ""

#. type: Bullet: '* '
msgid "How app developers can help NVDA users through accessible app designs."
msgstr ""

#. type: Bullet: '* '
msgid ""
"A few worked out examples and examples from existing app modules from NVDA "
"core and from community."
msgstr ""

#. type: Bullet: '* '
msgid "These topics may change."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "Drivers"
msgstr ""

#. type: Plain text
msgid "A chapter devoted to driver development."
msgstr ""

#. type: Title ##
#, no-wrap
msgid "Misc items"
msgstr ""

#. type: Plain text
msgid ""
"Includes Bitbucket repo, add-ons lisst, other topics and contact information."
msgstr ""

#. type: Plain text
msgid ""
"[1]: http://community.nvda-project.org/wiki/Development [2]: http://"
"community.nvda-project.org/documentation/developerGuide.html"
msgstr ""
