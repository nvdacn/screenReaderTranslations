[[!meta title="NVDA Add-on Development Guide"]]

## Welcome! ##

Welcome to NVDA add-on Development Guide. This is the one-stop guide on how NvDA add-ons are developed, as well as explaining some useful code segments from NvDA core source code useful when writing add-ons.

For more information on NVDA development, please visit [NvDA Community Development page][1]. Be sure to go over [NVDA Developer Guide][2] to familiarize yourself with key terms and basics steps on getting started with add-on development.

## System requirements ##

To create an add-on for NVDA, please make sure the following system requirements are met:

* A version of NVDA is available on your computer (either a portable or installed version will work, but we strongly recommend that you install a copy of NVDA on your development computer).
* Python 2.7 series, version 2.7.5 32-bit for Windows.
* SCons 2, version 2.3.0 for generating add-on packages.
* Markdown 2.0.1 for generating add-on documentation.
* Additional Python modules or dependencies for your add-on.

## What are add-ons? ##

An add-on is an additional package that extends NvDA's functionality or support for programs. This may include adding global features, enhancing support for an application or adding support for newer braille displays or speech synthesizers.

Currently, the following add-on types are supported:

* Global plugin: A global plugin adds features for NVDA which can be used anywhere, such as OCR capability.
* App module: An app module allows enhanced support for a program, such as specific windows or controls of a program such as audio editors.
* Driver: A driver allows a program to talk to hardware. Currently one can write drivers for new braille displays or speech synthesizers.

Each NVDA add-on is a zip file with the file extension of .nvda-addon. These can be installed via Add-ons Manager, found in NvDA 2012.2 or later. Alternativley, one can install them from file manager if one uses NVDA 2012.3 or later installed on the computer.

Throughout this guide, we refer to standard NVDA modules as "NvDA Core" to distinguish it from add-on modules.

# Future sections #

## Setting up the add-on development environment ##

Includes how to launch SCons, writing add-on readme and tips on testing the add-on.

## Hands-on examples ##

A beginner example section, including first global plugin, app module and add-on package. Also will include tips on commenting code and spaces versus tabs.

## Useful modules from NVDA core ##

Throughout the life of add-on development, you'll come across some useful modules from NvDA core that would be helpful in your add-on code. This section explains them as fome functions in those modules that would be useful.

### List of useful NVDA core modules and methods ###

The following lists available NVDA core modules and some useful methods found in those modules:

* Addon Handler (addonHandler.py): The module which implements the add-on subsystem. The addonHandler.initTranslation() method is used to initialize internationalization support for your add-on.
* NVDA basic API (api.py): A collection of core methods used throughout NVDA, such as obtaining focus and navigator object, setting focus and so on. See the next list on useful methods from this module.
* App Module subsystem (appModuleHandler.py): The subsystem in charge of handling app modules (see chapter on app modules for more information).
* ARIA support (aria.py): Implements support for Accessible Rich Internet Applications (ARIA).
* Base object collection (baseObject.py): Contains useful base objects such as scriptable objects (see the chapter on NvDA objects and overlay objects for more information).
* Braille input and output subsystem (braille.py, brailleInput.py): Controls braille output to and input from braille displays.
* Controls and states collection (controltypes.py): Includes dictionaries on control types (roles) and possible states that a control can be in.
* Events (eventHandler.py): Handles various events such as gaining focus.
* Global Plugin subsystem (globalPluginHandler.py): The module needed for controlling global plugins.
* IAccessible support (IAccessibleHandler.py, IAccessible objects): Used for supporting IAccessible controls.
* Scripts support (scriptHandler.py): Handles scripts, methods executed due to the user pressing keyboard commands and other input.
* Tone output (tones.py): Allows the user to hear tones.
* User interface messages (ui.py): Includes ui.message method used to speak or braille certain text.

### Useful methods ###

Here is a list of some useful methods used in add-ons:

Note: use table mode with the syntax of: method name, module where the method can be found, descriptio, example usage.

Please cover the following methods:

* From API: getFocusObject, getNavigatorObject, getForegroundObject, setFocusObject(obj), setNavigatorObject(obj).
* From tones: tones.beep.
* From UI: ui.message.
* And other functions.

# Future sections #

## Add-on components and development tips ##

Includes introductions to input and scripts, output systems, objects, events, configuration, add-on settings and reloading plug-ins. Also includes some tips on add-on development such as debugging. It concludes with some useful examples and do's and don'ts.

## Global Plugins ##

A chapter devoted to global plugins.

## App Modules ##

A chapter devoted to app modules.

## Drivers ##

A chapter devoted to driver development.

## Misc items ##

Includes Bitbucket repo, add-ons lisst, other topics and contact information.


