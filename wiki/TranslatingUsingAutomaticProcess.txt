= Translating using the automatic workflow process =

== Creating an account ==

Subscribe to the NVDA translations mailing list (above) and request an 
invitation.
Once you receive your [assembla http://www.assembla.com] invitation, 
you can proceed by creating a username/password so that you can use the 
svn server. Once you are logged in, you need to accept the invitation to 
the screenReaderTranslations team. After that, we don't need the website any 
longer.

== Download and install ==

If you use your own svn client then you can skip this section.

+ You can download a zip file containing both svn and git [here http://arabic-nvda.org/files/git-svn-setup.zip]
+ Extract the file to a new folder, and then run the setup.bat file.
+ The setup.bat will run two installers.
It will install svn, and then also install git, We install git because it gives you a better command line.
+ In the subversion install just press next next next without any problems.
+ In the git installer, run git from windows command line with unix tools. The rest is just fine as default.
+ You may need to restart your computer to finish the setup of both svn and git.
+ You can now delete the extracted folder
+ Now create a folder on your c or d drive, call it translation
make sure it is selected, and from the file menu, choose git bash here it will open the command line. The first time it may take a little while, but you know it finished its first time setup when it shows a dollar sign at the last line.
+ (optional) To make your bash prompt a little nicer you can now type and press enter:
```echo "PS1='\w: '" >>~/.bashrc```
 + It will return to the prompt, simply type ```exit``` and press enter.
 + Reopen by doing git bash here from the file menu, and your prompt should be easier to listen to.
+


== First time checkout (To download the repository) ==

``svn checkout http://subversion.assembla.com/svn/screenReaderTranslations .``

When you have just installed svn+git, and dont have a copy of the repository, create a translation folder in the root of your partition.
When the translation folder is selected, choose git bash here from the file menu.
It will take a few seconds and then you will see a command terminal.
Use the above command to get your copy of the current files, don't forget the dot at the end of the line.

You can see that it is successful when the last line that it printed 
says something like ``checked out revision 1234``

== Repository structure ==

The layout of the repository is as follows:

- Folders of two character language codes, as used by nvda, contains all the translation documents for this language.
- scripts: the scripts that are run on the server, should generally not be changed.
- some t2tconf files, standard config files that should not need to be changed.
- readme.txt, this document.
-  

Each language directory contains:
- ch-diffs, directory containing updates that need to be translated for the changes.t2t
- ug-diffs, directory containing updates that need to be translated for the userGuide.t2t
- changes.t2t, localized list of changes.
- changes.html, automatically generated html from t2t, so that you can check your syntax.
- userGuide.t2t, localized manual.
- userGuide.html, automatically generated html from your t2t, so that you can check your syntax.
- ug-stats.txt, statistics for the localized user guide (very useful).
- ug-stats-diff.txt, the diffrence between the english user guide statistics, and the localized user guide stats.
- nvda.po, the nvda interface file, new messages from pot are automatically merged, and you will be sent an email when there are new messages to be translated.
- langstrings_en.txt, english installer interface file
- langstrings_xx.txt, your localized installer interface file.
- characterDescriptions.dic, your localized character descriptions file.
- symbols.dic, your localized symbols file.
-


== Work flow ==

To minimize merge problems, and letting the automated system work 
effectively it is strongly recommended that you:

- ``svn update`` before you start working.
- ``svn commit -m "message"`` when you finish working with a section.
-


The work flow is something like this:

- You receive an email telling you that nvda.po has been updated, and it will tell you how many messages are untranslated, and how many are fuzzy.
 - svn update to get the modifications
 - localize the new messages/fuzzy messages.
 - commit, in the commit message you say if the work was finished or not.
- You receive an email telling you that there are new revisions for ch-diffs, or ug-diffs to be translated
 - you svn update, you see one new ch-diffs directory 4500 for example.
 - inside 4500 you can see the full changes.t2t, diff.txt wdiff.txt and log.txt
 - diff.txt will show you exactly what line has been added/changed/removed.
 - if your localization is complete, the line numbers of each diff block should be close to  where you need to do your changes.
 - If diff.txt showed you a line that was modified, and it isnt easy to see what changed, then you find the same line in wdiff.txt, and it will show you word by word change.
 - log.txt, sometimes helpful to see the commit message from nvda bzr directory, so it is provided incase it is useful.
 - when we finished with all the diff blocks for 4500, we check to make sure that nothing has been missed (see svn diff, svn status)
 - we svn commit, and in the message we say we completed the translation for 4500.
-


== Useful svn commands ==

before the following actions, you need to be in the right place i.e. go 
to the directory translation and while the language is 
selected, from the file menu choose git bash here.

When it opens, and if you listen to the path, you should hear your 
language code (ar for arabic, sv for swedish) at the end.

=== To check the status (to see which files have been modified) ===

``svn status``

If you get nothing, then svn didnt detect any changes.

If you got any output, then it is probably one of the following:

```
? file1.txt # means that svn does not know about file.txt, and it has not been asked to look after this file, and therefore will not be transmitted.
a file2.txt # svn didnt know about this file, but it has now been added, and will be transmitted when committing.
d file3.txt # we have told svn to stop looking after file3.txt.
! file4.txt # the file has been removed, and svn does not know why, file will be restored if we do svn update
m file5.txt # the file has been modified and the changes will be transmitted when we commit.
```


=== Download new changes from the server ===

```svn update```

it should say updated to revision 1266 as an example.

it will show a list of files that have been effected.

```
a file1.txt # meens that file.txt has been added to svn, and you are getting your copy.
u file2.txt # means that file2.txt has been updated
d file3.txt # means that someone removed the file and svn is also removing your copy of the file.
g file4.txt # means that you have changed the file , and it was also changed by someone else, but svn was happy merging the changes.
c file5.txt # means that you have modified the file and it has been  modified by someone else, but svn could not automatically merge, this causes a problem, so ask for help if you get it.
```


=== Seeing the modifications that you made of each file ===

``svn diff >work.txt``

will create a difference file, and save it to work.txt
review work.txt using your editor, if all is well then go ahead and commit.
otherwise, go to the file(s) that you have modified, and revise your modifications.
after new modifications, delete work.txt and execute the command again to get a new difference file.

If you have modified several files, and you want to just look at the 
diff for one file:

``svn diff changes.t2t >work.txt``

=== Committing (sending the modifications to the server) ===

``svn commit -m "informative message"``

Will commit all your modifications to the svn server.
Please make sure the message is informative, because it makes it easier to see what has changed from revision to revision.
see also  svn status and svn diff



=== unintended modification to file ===

``svn revert filename``

for example, when working on an arabic file, and reading english file 
along side, and a modification was made to the english unintentionally, 
and it now shows as modified when doing svn status, but the change 
should not be committed, then we use the revert command as above.

== Less frequently used svn commands ==

=== Seeing what changed between revisions ===

``svn diff -r 189:190 >work.txt``

will show the diffrence between revision 189 and 190, printing the diffrence to work.txt

=== Viewing commit messages ===

``svn log >log.txt``

will create a log.txt file, and put all the commit messages in the file

If we are intrested in just the log messages for a particular file then:

``svn log changes-ar.txt >log.txt``

will only include the log messages that involve changes-ar.txt, again storing the messages in log.txt

=== cleaning the screenReaderTranslations directory ===

``svn cleanup``

if you did something wrong or there is a conflet in a file the team is working on, just clean the translation directory to obtain a new copy.


=== restoring the files you were working on ===

``svn restore``

after cleaning the directory , you should restore the deleted files to resume work.


