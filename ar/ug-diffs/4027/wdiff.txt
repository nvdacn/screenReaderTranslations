
-{-- /tmp/tmpfile.t2t}-

+{++ userGuide.t2t}+
	2011-01-20 
-{12:12:36.572791319}-
 
+{12:12:46.150007000}+
 +0000
@@ -96,15 +96,13 @@ ++ NVDA portable ++
+++ NVDA Portable on a USB key +++
It is possible to place NVDA on a USB thumb drive so that you can use it on other computer systems.


When the Portable version asks where you wish to unpack 
-{it to,}-
 
+{it,}+
 type in the drive of your USB thumb drive, plus an optional 
-{subdirectory,}-
 
+{subdirectory}+
 where you wish to place NVDA.

If for example your USB thumb drive is at E:\, you might wish to type in E:\nvda, which will place NVDA in the NVDA subdirectory on your USB thumb drive.

Note that although this now means you can carry around NVDA and its settings with you anywhere, simply plugging in the USB thumb drive will not automatically start NVDA; You will have to start NVDA manually from either Windows Explorer or the Run Dialog.


-{Due to differences in USB thumb drives, and differences in Operating System security, either there may be more steps you will need to take to allow auto starting, or perhaps Windows and your}-






+{For information about automatically starting NVDA from a}+
 USB thumb 
-{drive may not support this feature at all. 

Please}-
 
+{drive, please}+
 see 
-{the article that explains}-
 this 
-{further at:}-
 
+{article:}+

http://www.nvda-project.org/wiki/RunningAutomaticallyFromAUSBDrive

+ Getting started with NVDA +
@@ -975,33 +973,37 @@ | Route to braille cell | route (bring c

+ Advanced Topics +





++ Remapping key assignments and 
-{other}-
 
+{Other Input}+
 Gestures ++
Users are able to provide or override mappings of input gestures (such as key presses) to scripts in a special file in the user's NVDA 
-{user}-
 configuration directory.
This file is called gestures.ini.

This file uses standard ini 
-{sintax, where the}-
 
+{syntax.
Each}+
 section 
-{names}-
 
+{provides mappings for scripts in a particular Python module and class inside NVDA.
The section name}+
 should be 
-{made up of}-
 the Python module and class separated by a dot 
-{(.) inside NVDA who's scripts you wish to map.}-
 
+{(.).}+

 
 The keys of each section are the names of the scripts you wish to bind to.


 The value of each key is a comma (,) separated list of gesture identifiers which represent the various input gestures that should be bound to that particular script.

Multiple keys can be provided for each section, and multiple sections can be provided in the file.


In order to find out 
+{gesture identifiers as well as}+
 the 
-{appropriate}-
 names of 
-{scripts,}-
 
+{scripts}+
 and 
-{their related}-
 
+{the}+
 class and 
-{module, the simplest way is to}-
 
+{module in which they are contained, you can}+
 turn on Input Help, activate the gesture (press the key) 
-{and}-
 
+{and,}+
 after turning off Input help, 
-{go to the}-
 
+{activate View}+
 log 
-{viewer}-
 in the tools 
-{menu,}-
 
+{menu}+
 and 
-{look at}-
 
+{examine}+
 the recent log entries.
One of these should 
-{talk}-
 
+{provide information}+
 about the input gesture you sent, 
-{and it will provide along with it}-
 
+{including}+
 the module.class and script if it is bound to one.

Following is an example of how you could bind NVDA+shift+t to the date time script.


To find out the correct script 
-{name,}-
 
+{name}+
 and module.class for date time, you would turn on Input 
-{Help,}-
 
+{Help}+
 and press NVDA+f12 (as this is the current gesture for the date time script). 
-{Then you}-


+{You}+
 would 
+{then}+
 turn off Input Help and 
-{take a look at}-
 
+{examine}+
 the log viewer.




-{You would see at or near}-




+{Towards}+
 the 
-{bottom:}-
 
+{bottom, you would see:}+


```
INFO - inputCore.InputManager._handleInputHelp (13:17:22):
Input help: gesture kb(desktop):nvda+f12, bound to script dateTime on globalCommands.GlobalCommands
```


From 
-{this we}-
 
+{this, you}+
 can see that the script name is 
-{dateTime,}-
 
+{dateTime}+
 and the module.class is globalCommands.GlobalCommands.


If the file does not yet exist, you would create a text file called gestures.ini in the user configuration 
-{directory,}-
 
+{directory}+
 and add the following content:

```
[globalCommands.GlobalCommands]
@@ -1010,10 +1012,9 @@ 	dateTime = kb:NVDA+shift+t

This would bind the key press NVDA+shift+t (in any keyboard layout) to the dateTime script.


You can also use the special script name of 
-{None,}-
 
+{None}+
 to unbind an input gesture from 
-{what ever}-
 
+{whatever}+
 script it was bound to in that 
-{module.class.}-
 
+{module and class.}+





Gesture identifiers consist of a 
-{two-leter}-
 
+{two leter}+
 device code (kb for 
-{keyboard,}-
 
+{keyboard and}+
 br for braille display), an optional 
-{sub device}-
 
+{sub-device}+
 or keyboard layout in brackets, a colon, and then one or more key names separated by a plus (+) sign.
 
Pressing keys while in Input help and then 
-{later}-
 viewing the log will 
-{also help in aiding}-
 
+{enable}+
 you to 
-{find out}-
 
+{discover}+
 the 
-{correct input}-
 gesture 
-{you may wish}-
 
+{identifiers}+
 to use.
 
\ No newline at end of file
