------------------------------------------------------------
revno: 3885 [merge]
committer: James Teh <jamie@jantrid.net>
branch nick: main
timestamp: Thu 2010-10-14 14:40:13 +1000
message:
  New input handling framework!
  This provides core functionality required for future enhancements, including a more flexible input mapping system, handling key presses from other sources such as braille displays, and automated testing.
  It also includes several improvements and fixes related to keyboard handling.
  Work on the major enhancements hasn't yet begun, but merging this now gives the new code some exposure and gives developers more time to familiarise themselves with the new concepts.
  
  Changes for users:
  	*Keyboard help has been renamed to input help to reflect that it handles input from sources other than the keyboard.
  	*The location of a script in the code is no longer reported in input help, as it is irrelevant and cryptic to the user.
  	*When NVDA detects that it has frozen, it continues to intercept NVDA modifier keys, even though it passes all other keys through to the system. This prevents the user from unintentionally toggling caps lock, etc. if they press an NVDA modifier key without realising NVDA has frozen. (#939)
  	*If keys are held down after using the pass next key through command, all keys (including key repeats) are now passed through until the last key is released.
  	*If an NVDA modifier key is pressed twice in quick succession to pass it through and the second press is held down, all key repeats will now be passed through as well.
  	* The volume up, down and mute keys are now reported in input help. This could be helpful if the user is uncertain as to what these keys are.
  	*If an NVDA modifier key is pressed twice quickly but there is an intervening key press, the NVDA modifier key is no longer passed through on the second press.
  
  Changes for developers:
  	* All input from the user is now represented by an inputCore.InputGesture instance.
  		* Each source of input subclasses the base InputGesture class. For example, key presses are encompassed by the keyboardHandler.KeyboardInputGesture class.
  	* All scripts now take an InputGesture instance instead of a key press.
  		* KeyboardInputGestures can be sent on to the OS using the send() method of the gesture.
  	* To send an arbitrary key press, you must now create a KeyboardInputGesture using KeyboardInputGesture.fromName() and then use its send() method.
  	* The key names used by NVDA (including key maps) have been made more friendly/logical; e.g. upArrow instead of extendedUp and numpadPageUp instead of prior. See the vkCodes module for a list.
------------------------------------------------------------
Use --include-merges or -n0 to see merged revisions.
