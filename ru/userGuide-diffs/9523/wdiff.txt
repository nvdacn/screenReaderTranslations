diff --git a/user_docs/en/userGuide.t2t b/user_docs/en/userGuide.t2t
index 008100f..62beffc 100644
-{-- a/user_docs/en/userGuide.t2t}-
+{++ b/user_docs/en/userGuide.t2t}+
@@ -1060,6 +1060,25 @@ Using the Level field, you can adjust the lowest symbol level at which this symb

When you are finished, press the OK button to save your changes or the Cancel button to discard them.




















-{++ Saving and Reloading the configuration ++
By default NVDA will automatically save your settings on exit.
Note, however, that}-

+{+++ Input Gestures +++
In}+ this -{option}- +{dialog, you}+ can -{be changed under}- +{customize}+ the -{general options in}- +{input gestures (keys on}+ the -{preferences menu.
@@ -1769,75 +1788,6 @@ Please see}- +{keyboard, buttons on a braille display, etc.) for NVDA commands.

Only commands that are applicable immediately before}+ the -{[BRLTTY key tables documentation http://mielke.cc/brltty/doc/driv

+ Advanced Topics +

++ Remapping Key Assignments and Other Input Gestures ++
Users}- +{dialog is opened}+ are -{able}- +{shown.
For example, if you want}+ to -{provide or override mappings of input gestures (such as key presses)}- +{customize commands related}+ to -{scripts}- +{browse mode, you should open the Input Gestures dialog while you are}+ in -{a special file}- +{browse mode.

The tree}+ in +{this dialog lists all of}+ the -{user's}- +{applicable}+ NVDA -{configuration directory.
This file is called gestures.ini.

This file uses standard ini syntax.
The file may contain multiple sections and each section may have one or more entries.

Each section provides mappings for scripts in}- +{commands grouped by category.
Any gestures associated with}+ a -{particular Python module and class inside NVDA.
- The section name should be}- +{command are listed beneath}+ the -{Python module and class separated by}- +{command.

To add an input gesture to}+ a -{dot (.).
- The key of each entry is}- +{command, select}+ the -{name of}- +{command and press the Add button.
Then, perform}+ the -{script to which}- input -{gestures should be bound.
Alternatively,}- +{gesture}+ you -{can use None}- +{wish}+ to -{unbind input gestures from}- +{associate; e.g. press}+ a -{script to which they were previously bound.
Each entry}- key -{can only be listed once per section, including None.
- The entry value is a comma (,) separated list of gesture identifiers for}- +{on}+ the -{input gestures that should be bound.
Gesture identifiers ending in a comma must be enclosed in quotes ("}- +{keyboard}+ or -{').
-

Gesture identifiers consist of a two letter device code;}- a -{sub-device, layout or mode in brackets;}- +{button on}+ a -{colon; and then}- +{braille display.
Often,}+ a -{type-specific string identifying the actual input, such as key or touch}- gesture -{names.
- For keyboard gestures, the device code is kb.
The part}- +{can be interpreted}+ in -{brackets is the keyboard layout and is optional.
If not specified, the gesture will apply to all keyboard layouts.
The string after the colon is one or}- more -{key names separated by a plus (+) sign.
- For braille display gestures, the device code is br.
The part in brackets identifies the specific braille display and is mandatory.
The string after the colon is}- +{than}+ one -{or more key names separated by a plus (+) sign.
-}- +{way.}+
For -{touch gestures, the device code is ts.
The part in brackets is the touch mode and is optional.
The string after the colon is a touch gesture; e.g. double_tap, 2fingerflickUp or 3finger_tap.
-

In order to discover gesture identifiers, script names and the class and module in which they are contained,}- +{example, if}+ you -{can:
+ Turn}- +{pressed a key}+ on -{Input Help.
+ Activate the gesture (press the key, touch the screen, etc.).
+ Turn off input help.
+ Activate View log in the NVDA Tools menu.
+ Examine the recent log entries.
One of these should provide information about}- the -{input gesture}- +{keyboard,}+ you -{sent, including}- +{may wish it to be specific to}+ the -{module.class and script if}- +{current keyboard layout (e.g. desktop or laptop) or you may wish}+ it -{is bound}- to -{one.
+

Following is an example of how}- +{apply for all layouts.
In this case, a menu will appear allowing}+ you -{could bind NVDA+shift+t}- to +{select}+ the -{date time script.}- +{desired option.}+

To -{find out}- +{remove a gesture from a command, select}+ the -{correct script name}- +{gesture}+ and -{module.class for date time,}- +{press the Remove button.

When}+ you -{would turn on Input Help and}- +{are finished making changes,}+ press -{NVDA+f12 (as this is}- the -{current gesture for}- +{OK button to save them or}+ the -{date time script).
You would then turn off Input Help}- +{Cancel button to discard them.

++ Saving}+ and -{examine}- +{Reloading}+ the -{log viewer.

Towards the bottom, you would see:

```
INFO - inputCore.InputManager._handleInputHelp (13:17:22):
Input help: gesture kb(desktop):NVDA+f12, bound to script dateTime}- +{configuration ++
By default NVDA will automatically save your settings}+ on -{globalCommands.GlobalCommands
```

From this, you can see}- +{exit.
Note, however,}+ that +{this option can be changed under}+ the -{script name is dateTime and the module.class is globalCommands.GlobalCommands.

If the file does not yet exist, you would create a text file called gestures.ini}- +{general options}+ in the -{user configuration directory and add the following content:

```
[globalCommands.GlobalCommands]
	dateTime = kb:NVDA+shift+t
```

This would bind}- +{preferences menu.
@@ -1769,75 +1788,6 @@ Please see}+ the +{[BRLTTY}+ key -{press NVDA+shift+t (in any keyboard layout) to the dateTime script.

Note that the original NVDA+f12 binding would still work.
If you wanted to remove this binding, you would add the following line:

```
	None = kb:NVDA+f12
```}- +{tables documentation http://mielke.cc/brltty/doc/driv

+ Advanced Topics +}+






































































++ Advanced Customization of Symbol Pronunciation ++
It is possible to customize the pronunciation of punctuation and other symbols beyond what can be done using the [Punctuation/symbol pronunciation #SymbolPronunciation] dialog.
For example, you can specify whether the raw symbol should be sent to the synthesizer (e.g. to cause a pause or change in inflection) and you can add custom symbols.
